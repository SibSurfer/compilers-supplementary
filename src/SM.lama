-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun evalHelper (c, i) {
  case c of [stack, state, world] ->
    case i of
      READ ->
        case readWorld (world) of [v, w] ->
          [v:stack, state, w]
        esac
    | WRITE ->
        case stack of s:tail ->
          [tail, state, writeWorld(s, world)]
        esac
    | BINOP (op) ->
        case stack of right:left:tail ->
          var ans = case op of
            "+"  -> left + right
          | "-"  -> left - right
          | "*"  -> left * right
          | "/"  -> left / right
          | "!=" -> left != right
          | "&&" -> left && right
          | "!!" -> left !! right
          | "%"  -> left % right
          | "==" -> left == right
          | "<"  -> left < right
          | "<=" -> left <= right
          | ">"  -> left > right
          | ">=" -> left >= right
          esac;
          [ans:tail, state, world]
        esac
    | LD (varStr) ->
        [state (varStr) : stack, state, world]
    | ST (varStr) ->
        case stack of s:tail ->
          [tail, state <- [varStr, s], world]
        esac
    | CONST (Num) ->
        [Num : stack, state, world]
    esac
  esac
}
fun eval (c, insns) {
  case insns of
    l:tail ->
      evalHelper (eval (c, tail), l)
  | {} -> c
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of 
    Var(varStr) -> { 
      LD (varStr) 
    }
  | Const (Num) -> {
     CONST (Num) 
    }
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ { BINOP (op) }
  esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
    Assn (a, exp) -> compileExpr (exp) +++ ( ST (a) : {})
  | Seq (fst, snd) -> compileSM (fst) +++ compileSM (snd)
  | Skip -> {}
  | Read (x) -> READ : ST (x) : {}
  | Write (exp) -> compileExpr (exp) +++ (WRITE : {})
  esac
}
