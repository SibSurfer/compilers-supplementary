-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of
    {} -> [stack, state, world]
    | start:end -> 
      case start of
        READ -> 
          case readWorld(world) of [inst, world] ->
            eval ([inst:stack, state, world], end) 
          esac
      | WRITE -> 
          case stack of inst:stack -> 
            eval([stack, state, writeWorld(inst, world)], end) 
          esac
      | BINOP (op) -> 
          case stack of right:left:stack -> 
            var ans = case op of
              "+"  -> left + right
            | "-"  -> left - right
            | "*"  -> left * right
            | "/"  -> left / right
            | "!=" -> left != right
            | "&&" -> left && right
            | "!!" -> left !! right
            | "%"  -> left % right
            | "==" -> left == right
            | "<"  -> left < right
            | "<=" -> left <= right
            | ">"  -> left > right
            | ">=" -> left >= right
              esac;
            eval([ans:stack, state, world], end) 
          esac
      | LD (varStr) -> 
          eval ([state (varStr):stack, state, world], end)
      | ST (varStr) -> 
          case stack of inst:stack -> 
            eval ([stack, state <- [varStr, inst], world], end) 
          esac
      | CONST (num) -> 
          eval ([num:stack, state, world], end)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of 
    Var(varStr) -> { 
      LD (varStr) 
    }
  | Const (num) -> {
     CONST (num) 
    }
  | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ { BINOP (op) }
  esac 
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
    Assn (a, exp) -> compileExpr (exp) +++ ( ST (a) : {})
  | Seq (fst, snd) -> compileSM (fst) +++ compileSM (snd)
  | Skip -> {}
  | Read (x) -> READ : ST (x) : {}
  | Write (exp) -> compileExpr (exp) +++ (WRITE : {})
  esac
}
