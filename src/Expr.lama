-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
  Var (varStr) -> [c, lookup(s, varStr)]
  | Assn (x, a) -> case evalList (c, {x, a}) of [[s, w], {Ref (x), a}] -> [[s <- [x, a], w], a] esac
  | Seq (q, t) -> case evalList (c, {q, t}) of [c, {q, t}] -> [c, t] esac
  | Ref (e) -> [c, Ref(e)]
  | Skip -> [c, None]
  | Read (varStr) -> case readWorld (w) of [v, w] -> [[s <- [varStr, v], w], None] esac
  | Write (expr) -> case eval (c, expr) of [[s, w], v] -> [[s, writeWorld (v, w)], None] esac
  | If (iff, a, b) -> case eval(c, iff) of [c, out] -> if out then eval(c, a) else eval(c, b) fi esac
  | While (iff, b) -> case eval(c, iff) of [c, out] -> if out then eval(c, Seq(b, While(iff, b))) else [c, {}] fi esac
  | DoWhile (stmt, expr) -> eval (c, Seq (stmt, While (expr, stmt)))
  | Const (n) -> [c, n]
  | Binop (op, l, r) -> case evalList (c, {l, r}) of [c, {l, r}] -> [c, evalOp (op, l, r)] esac
  | Scope (d, e) -> 
    case foldl (fun (s, t) {
      case t of
        Var (strs) -> addNames (s, strs)
      | Fun (varStr, pars, body) -> addFunction (s, varStr, pars, body)
      esac
    }, 
    s.enterScope, d) of s -> case eval ([s, w], e) of [[s, w], v] -> [[s.leaveScope, w], v] esac 
    esac
  | Call (f, pars) -> case evalList(c, pars) of [[st, w], vals] -> case lookup(st, f) of Fun(ns, body) -> 
      case foldl(fun(s, [n, v]){addName(s, n, v)}, enterFunction(st), zip(ns, vals)) of scp -> 
        case eval([scp, w], body) of [[scp, w], res] -> [[leaveFunction(st, getGlobal(scp)), w], res]
      esac esac esac esac
  | Ignore (e) -> case eval (c, e) of [c, em] -> [c, None] esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}