-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of 
    Var (varStr) -> st (varStr)
  | Const (num) -> num
  | Binop (op, left, right) -> 
      var left_res = evalExpr(st, left);
      var right_res = evalExpr(st, right);
      case op of 
        "+"  -> left_res +  right_res
      | "-"  -> left_res -  right_res
      | "*"  -> left_res *  right_res
      | "/"  -> left_res /  right_res
      | "%"  -> left_res %  right_res
      | "==" -> left_res == right_res
      | "!=" -> left_res != right_res
      | "<"  -> left_res <  right_res
      | "<=" -> left_res <= right_res
      | ">"  -> left_res >  right_res
      | ">=" -> left_res >= right_res
      | "&&" -> left_res && right_res
      | "!!" -> left_res !! right_res
      esac
  esac 
}
