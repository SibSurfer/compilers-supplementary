-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
    case stmt of
    Assn (varStr, exp) ->
      case c of [state, world] -> [state <- [varStr, evalExpr (state, exp)], world]
      esac
  | Seq (l, r) -> eval(eval (c, l), r)
  | Skip -> c
  | Read (varStr) ->
      case c of [state, world] ->
        case readWorld (world) of [val, wrld] ->
          [state <- [varStr, val], wrld]
        esac
      esac
  | Write (exp) ->
      case c of [state, world] ->
        [state, writeWorld(evalExpr (state, exp), world)]
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
