-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (l, op, r) { 
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
            [Left, { [s ("!!"), binop], 
                     [s ("&&"), binop] }],
            [Nona, { [s ("!="), binop],
                     [s ("=="), binop],                       
                     [s (">"), binop], 
                     [s ("<"), binop], 
                     [s (">="), binop], 
                     [s ("<="), binop] }],
            [Left, { [s ("+"), binop], 
                     [s ("-"), binop] }],
            [Left, { [s ("*"), binop], 
                     [s ("/"), binop], 
                     [s ("%"), binop] }]
          }, 
          primary
      );

var stGeneral = memo $ eta syntax (
  kRead x=inbr[s("("), lident, s(")")] {Read (x)}      
  | kWrite w=inbr[s("("), exp, s(")")] {Write (w)}       
  | kSkip {Skip}                                         
  | x=lident s[":="] w=exp { Assn (x, w) }
);

var stmt = memo $ eta syntax (
  stGeneral | 
  g=stGeneral s[";"] t=stmt {
    Seq(g, t)
    }
  );
   

-- Public top-level parser
public parse = stmt;
             
