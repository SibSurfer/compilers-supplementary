-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}
fun binop (l, op, r) { 
  Binop (op, l, r)
}
-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
          exp = memo $ eta expr ({
            [Left, { [s ("!!"), binop], 
                     [s ("&&"), binop] }],
            [Nona, { [s ("!="), binop],
                     [s ("=="), binop],                       
                     [s (">"), binop], 
                     [s ("<"), binop], 
                     [s (">="), binop], 
                     [s ("<="), binop] }],
            [Left, { [s ("+"), binop], 
                     [s ("-"), binop] }],
            [Left, { [s ("*"), binop], 
                     [s ("/"), binop], 
                     [s ("%"), binop] }]
          }, 
          primary
      );
var anotherS = memo $ eta syntax (
  kFi {Skip} |
  kElse a=stmt kFi {a} |
  kElif k=exp kThen a=stmt e=anotherS {If (k, a, e)}
);

var stGeneral = memo $ eta syntax (
  kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
  kWrite r=inbr[s("("), exp, s(")")] {Write (r)} |
  kSkip {Skip} |
  kIf k=exp kThen a=stmt r=anotherS {If (k, a, r)} |
  kWhile k=exp kDo b=stmt kOd {While (k, b)} |
  kDo b=stmt kWhile k=exp kOd {DoWhile (b, k)} |
  kFor i=stmt s[","] k=exp s[","] s=stmt kDo b=stmt kOd {
    Seq (i, While (k, Seq (b, s)))
    } |
  x=lident s[":="] r=exp { Assn (x, r) }
);

var stmt = memo $ eta syntax (
  stGeneral | 
  g=stGeneral s[";"] t=stmt {
    Seq(g, t)
    }
  );
   

-- Public top-level parser
public parse = stmt;
